# bot_api/views.py
import json
import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from telegram import Update
from .bot import application  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç application –∏–∑ bot.py

logger = logging.getLogger(__name__)

@csrf_exempt
async def telegram_webhook(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON")
            return JsonResponse({"error": "Invalid JSON"}, status=400)

        update = Update.de_json(data, application.bot)
        print(f"üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å chat_id —á–µ—Ä–µ–∑ effective_chat
        chat = update.effective_chat
        if chat:
            print(f"üÜî Chat ID: {chat.id}")
        else:
            print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Chat ID.")

        if not application.running:
            await application.initialize()

        await application.process_update(update)
        return JsonResponse({"status": "ok"})
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
        return JsonResponse({"error": "Invalid request"}, status=400)

